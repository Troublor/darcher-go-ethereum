// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DarcherControllerServiceClient is the client API for DarcherControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DarcherControllerServiceClient interface {
	NotifyTxReceived(ctx context.Context, in *TxReceivedMsg, opts ...grpc.CallOption) (*empty.Empty, error)
	NotifyTxFinished(ctx context.Context, in *TxFinishedMsg, opts ...grpc.CallOption) (*empty.Empty, error)
	NotifyTxTraverseStart(ctx context.Context, in *TxTraverseStartMsg, opts ...grpc.CallOption) (*empty.Empty, error)
	NotifyTxStateChangeMsg(ctx context.Context, in *TxStateChangeMsg, opts ...grpc.CallOption) (*empty.Empty, error)
	AskForNextState(ctx context.Context, in *TxStateControlMsg, opts ...grpc.CallOption) (*TxStateControlMsg, error)
	SelectTx(ctx context.Context, in *SelectTxControlMsg, opts ...grpc.CallOption) (*SelectTxControlMsg, error)
}

type darcherControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDarcherControllerServiceClient(cc grpc.ClientConnInterface) DarcherControllerServiceClient {
	return &darcherControllerServiceClient{cc}
}

func (c *darcherControllerServiceClient) NotifyTxReceived(ctx context.Context, in *TxReceivedMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/darcher.DarcherControllerService/notifyTxReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darcherControllerServiceClient) NotifyTxFinished(ctx context.Context, in *TxFinishedMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/darcher.DarcherControllerService/notifyTxFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darcherControllerServiceClient) NotifyTxTraverseStart(ctx context.Context, in *TxTraverseStartMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/darcher.DarcherControllerService/notifyTxTraverseStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darcherControllerServiceClient) NotifyTxStateChangeMsg(ctx context.Context, in *TxStateChangeMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/darcher.DarcherControllerService/notifyTxStateChangeMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darcherControllerServiceClient) AskForNextState(ctx context.Context, in *TxStateControlMsg, opts ...grpc.CallOption) (*TxStateControlMsg, error) {
	out := new(TxStateControlMsg)
	err := c.cc.Invoke(ctx, "/darcher.DarcherControllerService/askForNextState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darcherControllerServiceClient) SelectTx(ctx context.Context, in *SelectTxControlMsg, opts ...grpc.CallOption) (*SelectTxControlMsg, error) {
	out := new(SelectTxControlMsg)
	err := c.cc.Invoke(ctx, "/darcher.DarcherControllerService/selectTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DarcherControllerServiceServer is the server API for DarcherControllerService service.
// All implementations must embed UnimplementedDarcherControllerServiceServer
// for forward compatibility
type DarcherControllerServiceServer interface {
	NotifyTxReceived(context.Context, *TxReceivedMsg) (*empty.Empty, error)
	NotifyTxFinished(context.Context, *TxFinishedMsg) (*empty.Empty, error)
	NotifyTxTraverseStart(context.Context, *TxTraverseStartMsg) (*empty.Empty, error)
	NotifyTxStateChangeMsg(context.Context, *TxStateChangeMsg) (*empty.Empty, error)
	AskForNextState(context.Context, *TxStateControlMsg) (*TxStateControlMsg, error)
	SelectTx(context.Context, *SelectTxControlMsg) (*SelectTxControlMsg, error)
	mustEmbedUnimplementedDarcherControllerServiceServer()
}

// UnimplementedDarcherControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDarcherControllerServiceServer struct {
}

func (*UnimplementedDarcherControllerServiceServer) NotifyTxReceived(context.Context, *TxReceivedMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTxReceived not implemented")
}
func (*UnimplementedDarcherControllerServiceServer) NotifyTxFinished(context.Context, *TxFinishedMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTxFinished not implemented")
}
func (*UnimplementedDarcherControllerServiceServer) NotifyTxTraverseStart(context.Context, *TxTraverseStartMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTxTraverseStart not implemented")
}
func (*UnimplementedDarcherControllerServiceServer) NotifyTxStateChangeMsg(context.Context, *TxStateChangeMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTxStateChangeMsg not implemented")
}
func (*UnimplementedDarcherControllerServiceServer) AskForNextState(context.Context, *TxStateControlMsg) (*TxStateControlMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AskForNextState not implemented")
}
func (*UnimplementedDarcherControllerServiceServer) SelectTx(context.Context, *SelectTxControlMsg) (*SelectTxControlMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTx not implemented")
}
func (*UnimplementedDarcherControllerServiceServer) mustEmbedUnimplementedDarcherControllerServiceServer() {
}

func RegisterDarcherControllerServiceServer(s *grpc.Server, srv DarcherControllerServiceServer) {
	s.RegisterService(&_DarcherControllerService_serviceDesc, srv)
}

func _DarcherControllerService_NotifyTxReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxReceivedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarcherControllerServiceServer).NotifyTxReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darcher.DarcherControllerService/NotifyTxReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarcherControllerServiceServer).NotifyTxReceived(ctx, req.(*TxReceivedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarcherControllerService_NotifyTxFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxFinishedMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarcherControllerServiceServer).NotifyTxFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darcher.DarcherControllerService/NotifyTxFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarcherControllerServiceServer).NotifyTxFinished(ctx, req.(*TxFinishedMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarcherControllerService_NotifyTxTraverseStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxTraverseStartMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarcherControllerServiceServer).NotifyTxTraverseStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darcher.DarcherControllerService/NotifyTxTraverseStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarcherControllerServiceServer).NotifyTxTraverseStart(ctx, req.(*TxTraverseStartMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarcherControllerService_NotifyTxStateChangeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStateChangeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarcherControllerServiceServer).NotifyTxStateChangeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darcher.DarcherControllerService/NotifyTxStateChangeMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarcherControllerServiceServer).NotifyTxStateChangeMsg(ctx, req.(*TxStateChangeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarcherControllerService_AskForNextState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStateControlMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarcherControllerServiceServer).AskForNextState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darcher.DarcherControllerService/AskForNextState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarcherControllerServiceServer).AskForNextState(ctx, req.(*TxStateControlMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarcherControllerService_SelectTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTxControlMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarcherControllerServiceServer).SelectTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darcher.DarcherControllerService/SelectTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarcherControllerServiceServer).SelectTx(ctx, req.(*SelectTxControlMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _DarcherControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "darcher.DarcherControllerService",
	HandlerType: (*DarcherControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notifyTxReceived",
			Handler:    _DarcherControllerService_NotifyTxReceived_Handler,
		},
		{
			MethodName: "notifyTxFinished",
			Handler:    _DarcherControllerService_NotifyTxFinished_Handler,
		},
		{
			MethodName: "notifyTxTraverseStart",
			Handler:    _DarcherControllerService_NotifyTxTraverseStart_Handler,
		},
		{
			MethodName: "notifyTxStateChangeMsg",
			Handler:    _DarcherControllerService_NotifyTxStateChangeMsg_Handler,
		},
		{
			MethodName: "askForNextState",
			Handler:    _DarcherControllerService_AskForNextState_Handler,
		},
		{
			MethodName: "selectTx",
			Handler:    _DarcherControllerService_SelectTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "darcher_controller_service.proto",
}
