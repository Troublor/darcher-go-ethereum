// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// P2PNetworkServiceClient is the client API for P2PNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PNetworkServiceClient interface {
	NotifyNodeStart(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error)
	AddPeerControl(ctx context.Context, opts ...grpc.CallOption) (P2PNetworkService_AddPeerControlClient, error)
	RemovePeerControl(ctx context.Context, opts ...grpc.CallOption) (P2PNetworkService_RemovePeerControlClient, error)
}

type p2PNetworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PNetworkServiceClient(cc grpc.ClientConnInterface) P2PNetworkServiceClient {
	return &p2PNetworkServiceClient{cc}
}

func (c *p2PNetworkServiceClient) NotifyNodeStart(ctx context.Context, in *Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/darcher.P2PNetworkService/notifyNodeStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PNetworkServiceClient) AddPeerControl(ctx context.Context, opts ...grpc.CallOption) (P2PNetworkService_AddPeerControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PNetworkService_serviceDesc.Streams[0], "/darcher.P2PNetworkService/addPeerControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PNetworkServiceAddPeerControlClient{stream}
	return x, nil
}

type P2PNetworkService_AddPeerControlClient interface {
	Send(*AddPeerControlMsg) error
	Recv() (*AddPeerControlMsg, error)
	grpc.ClientStream
}

type p2PNetworkServiceAddPeerControlClient struct {
	grpc.ClientStream
}

func (x *p2PNetworkServiceAddPeerControlClient) Send(m *AddPeerControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PNetworkServiceAddPeerControlClient) Recv() (*AddPeerControlMsg, error) {
	m := new(AddPeerControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PNetworkServiceClient) RemovePeerControl(ctx context.Context, opts ...grpc.CallOption) (P2PNetworkService_RemovePeerControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_P2PNetworkService_serviceDesc.Streams[1], "/darcher.P2PNetworkService/removePeerControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PNetworkServiceRemovePeerControlClient{stream}
	return x, nil
}

type P2PNetworkService_RemovePeerControlClient interface {
	Send(*RemovePeerControlMsg) error
	Recv() (*RemovePeerControlMsg, error)
	grpc.ClientStream
}

type p2PNetworkServiceRemovePeerControlClient struct {
	grpc.ClientStream
}

func (x *p2PNetworkServiceRemovePeerControlClient) Send(m *RemovePeerControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PNetworkServiceRemovePeerControlClient) Recv() (*RemovePeerControlMsg, error) {
	m := new(RemovePeerControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// P2PNetworkServiceServer is the server API for P2PNetworkService service.
// All implementations must embed UnimplementedP2PNetworkServiceServer
// for forward compatibility
type P2PNetworkServiceServer interface {
	NotifyNodeStart(context.Context, *Node) (*empty.Empty, error)
	AddPeerControl(P2PNetworkService_AddPeerControlServer) error
	RemovePeerControl(P2PNetworkService_RemovePeerControlServer) error
	mustEmbedUnimplementedP2PNetworkServiceServer()
}

// UnimplementedP2PNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedP2PNetworkServiceServer struct {
}

func (*UnimplementedP2PNetworkServiceServer) NotifyNodeStart(context.Context, *Node) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyNodeStart not implemented")
}
func (*UnimplementedP2PNetworkServiceServer) AddPeerControl(P2PNetworkService_AddPeerControlServer) error {
	return status.Errorf(codes.Unimplemented, "method AddPeerControl not implemented")
}
func (*UnimplementedP2PNetworkServiceServer) RemovePeerControl(P2PNetworkService_RemovePeerControlServer) error {
	return status.Errorf(codes.Unimplemented, "method RemovePeerControl not implemented")
}
func (*UnimplementedP2PNetworkServiceServer) mustEmbedUnimplementedP2PNetworkServiceServer() {}

func RegisterP2PNetworkServiceServer(s *grpc.Server, srv P2PNetworkServiceServer) {
	s.RegisterService(&_P2PNetworkService_serviceDesc, srv)
}

func _P2PNetworkService_NotifyNodeStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PNetworkServiceServer).NotifyNodeStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/darcher.P2PNetworkService/NotifyNodeStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PNetworkServiceServer).NotifyNodeStart(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PNetworkService_AddPeerControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PNetworkServiceServer).AddPeerControl(&p2PNetworkServiceAddPeerControlServer{stream})
}

type P2PNetworkService_AddPeerControlServer interface {
	Send(*AddPeerControlMsg) error
	Recv() (*AddPeerControlMsg, error)
	grpc.ServerStream
}

type p2PNetworkServiceAddPeerControlServer struct {
	grpc.ServerStream
}

func (x *p2PNetworkServiceAddPeerControlServer) Send(m *AddPeerControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PNetworkServiceAddPeerControlServer) Recv() (*AddPeerControlMsg, error) {
	m := new(AddPeerControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _P2PNetworkService_RemovePeerControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PNetworkServiceServer).RemovePeerControl(&p2PNetworkServiceRemovePeerControlServer{stream})
}

type P2PNetworkService_RemovePeerControlServer interface {
	Send(*RemovePeerControlMsg) error
	Recv() (*RemovePeerControlMsg, error)
	grpc.ServerStream
}

type p2PNetworkServiceRemovePeerControlServer struct {
	grpc.ServerStream
}

func (x *p2PNetworkServiceRemovePeerControlServer) Send(m *RemovePeerControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PNetworkServiceRemovePeerControlServer) Recv() (*RemovePeerControlMsg, error) {
	m := new(RemovePeerControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _P2PNetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "darcher.P2PNetworkService",
	HandlerType: (*P2PNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notifyNodeStart",
			Handler:    _P2PNetworkService_NotifyNodeStart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "addPeerControl",
			Handler:       _P2PNetworkService_AddPeerControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "removePeerControl",
			Handler:       _P2PNetworkService_RemovePeerControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "p2p_network_service.proto",
}
