// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MiningServiceClient is the client API for MiningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiningServiceClient interface {
	MineBlocksControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineBlocksControlClient, error)
	MineBlocksExceptTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineBlocksExceptTxControlClient, error)
	MineBlocksWithoutTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineBlocksWithoutTxControlClient, error)
	MineTdControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineTdControlClient, error)
	MineTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineTxControlClient, error)
	ScheduleTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_ScheduleTxControlClient, error)
	CheckTxInPoolControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_CheckTxInPoolControlClient, error)
}

type miningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiningServiceClient(cc grpc.ClientConnInterface) MiningServiceClient {
	return &miningServiceClient{cc}
}

func (c *miningServiceClient) MineBlocksControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineBlocksControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MiningService_serviceDesc.Streams[0], "/darcher.MiningService/mineBlocksControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningServiceMineBlocksControlClient{stream}
	return x, nil
}

type MiningService_MineBlocksControlClient interface {
	Send(*MineBlocksControlMsg) error
	Recv() (*MineBlocksControlMsg, error)
	grpc.ClientStream
}

type miningServiceMineBlocksControlClient struct {
	grpc.ClientStream
}

func (x *miningServiceMineBlocksControlClient) Send(m *MineBlocksControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miningServiceMineBlocksControlClient) Recv() (*MineBlocksControlMsg, error) {
	m := new(MineBlocksControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miningServiceClient) MineBlocksExceptTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineBlocksExceptTxControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MiningService_serviceDesc.Streams[1], "/darcher.MiningService/mineBlocksExceptTxControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningServiceMineBlocksExceptTxControlClient{stream}
	return x, nil
}

type MiningService_MineBlocksExceptTxControlClient interface {
	Send(*MineBlocksExceptTxControlMsg) error
	Recv() (*MineBlocksExceptTxControlMsg, error)
	grpc.ClientStream
}

type miningServiceMineBlocksExceptTxControlClient struct {
	grpc.ClientStream
}

func (x *miningServiceMineBlocksExceptTxControlClient) Send(m *MineBlocksExceptTxControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miningServiceMineBlocksExceptTxControlClient) Recv() (*MineBlocksExceptTxControlMsg, error) {
	m := new(MineBlocksExceptTxControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miningServiceClient) MineBlocksWithoutTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineBlocksWithoutTxControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MiningService_serviceDesc.Streams[2], "/darcher.MiningService/mineBlocksWithoutTxControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningServiceMineBlocksWithoutTxControlClient{stream}
	return x, nil
}

type MiningService_MineBlocksWithoutTxControlClient interface {
	Send(*MineBlocksWithoutTxControlMsg) error
	Recv() (*MineBlocksWithoutTxControlMsg, error)
	grpc.ClientStream
}

type miningServiceMineBlocksWithoutTxControlClient struct {
	grpc.ClientStream
}

func (x *miningServiceMineBlocksWithoutTxControlClient) Send(m *MineBlocksWithoutTxControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miningServiceMineBlocksWithoutTxControlClient) Recv() (*MineBlocksWithoutTxControlMsg, error) {
	m := new(MineBlocksWithoutTxControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miningServiceClient) MineTdControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineTdControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MiningService_serviceDesc.Streams[3], "/darcher.MiningService/mineTdControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningServiceMineTdControlClient{stream}
	return x, nil
}

type MiningService_MineTdControlClient interface {
	Send(*MineTdControlMsg) error
	Recv() (*MineTdControlMsg, error)
	grpc.ClientStream
}

type miningServiceMineTdControlClient struct {
	grpc.ClientStream
}

func (x *miningServiceMineTdControlClient) Send(m *MineTdControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miningServiceMineTdControlClient) Recv() (*MineTdControlMsg, error) {
	m := new(MineTdControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miningServiceClient) MineTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_MineTxControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MiningService_serviceDesc.Streams[4], "/darcher.MiningService/mineTxControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningServiceMineTxControlClient{stream}
	return x, nil
}

type MiningService_MineTxControlClient interface {
	Send(*MineTxControlMsg) error
	Recv() (*MineTxControlMsg, error)
	grpc.ClientStream
}

type miningServiceMineTxControlClient struct {
	grpc.ClientStream
}

func (x *miningServiceMineTxControlClient) Send(m *MineTxControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miningServiceMineTxControlClient) Recv() (*MineTxControlMsg, error) {
	m := new(MineTxControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miningServiceClient) ScheduleTxControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_ScheduleTxControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MiningService_serviceDesc.Streams[5], "/darcher.MiningService/scheduleTxControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningServiceScheduleTxControlClient{stream}
	return x, nil
}

type MiningService_ScheduleTxControlClient interface {
	Send(*ScheduleTxControlMsg) error
	Recv() (*ScheduleTxControlMsg, error)
	grpc.ClientStream
}

type miningServiceScheduleTxControlClient struct {
	grpc.ClientStream
}

func (x *miningServiceScheduleTxControlClient) Send(m *ScheduleTxControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miningServiceScheduleTxControlClient) Recv() (*ScheduleTxControlMsg, error) {
	m := new(ScheduleTxControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miningServiceClient) CheckTxInPoolControl(ctx context.Context, opts ...grpc.CallOption) (MiningService_CheckTxInPoolControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MiningService_serviceDesc.Streams[6], "/darcher.MiningService/checkTxInPoolControl", opts...)
	if err != nil {
		return nil, err
	}
	x := &miningServiceCheckTxInPoolControlClient{stream}
	return x, nil
}

type MiningService_CheckTxInPoolControlClient interface {
	Send(*CheckTxInPoolControlMsg) error
	Recv() (*CheckTxInPoolControlMsg, error)
	grpc.ClientStream
}

type miningServiceCheckTxInPoolControlClient struct {
	grpc.ClientStream
}

func (x *miningServiceCheckTxInPoolControlClient) Send(m *CheckTxInPoolControlMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miningServiceCheckTxInPoolControlClient) Recv() (*CheckTxInPoolControlMsg, error) {
	m := new(CheckTxInPoolControlMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MiningServiceServer is the server API for MiningService service.
// All implementations must embed UnimplementedMiningServiceServer
// for forward compatibility
type MiningServiceServer interface {
	MineBlocksControl(MiningService_MineBlocksControlServer) error
	MineBlocksExceptTxControl(MiningService_MineBlocksExceptTxControlServer) error
	MineBlocksWithoutTxControl(MiningService_MineBlocksWithoutTxControlServer) error
	MineTdControl(MiningService_MineTdControlServer) error
	MineTxControl(MiningService_MineTxControlServer) error
	ScheduleTxControl(MiningService_ScheduleTxControlServer) error
	CheckTxInPoolControl(MiningService_CheckTxInPoolControlServer) error
	mustEmbedUnimplementedMiningServiceServer()
}

// UnimplementedMiningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMiningServiceServer struct {
}

func (*UnimplementedMiningServiceServer) MineBlocksControl(MiningService_MineBlocksControlServer) error {
	return status.Errorf(codes.Unimplemented, "method MineBlocksControl not implemented")
}
func (*UnimplementedMiningServiceServer) MineBlocksExceptTxControl(MiningService_MineBlocksExceptTxControlServer) error {
	return status.Errorf(codes.Unimplemented, "method MineBlocksExceptTxControl not implemented")
}
func (*UnimplementedMiningServiceServer) MineBlocksWithoutTxControl(MiningService_MineBlocksWithoutTxControlServer) error {
	return status.Errorf(codes.Unimplemented, "method MineBlocksWithoutTxControl not implemented")
}
func (*UnimplementedMiningServiceServer) MineTdControl(MiningService_MineTdControlServer) error {
	return status.Errorf(codes.Unimplemented, "method MineTdControl not implemented")
}
func (*UnimplementedMiningServiceServer) MineTxControl(MiningService_MineTxControlServer) error {
	return status.Errorf(codes.Unimplemented, "method MineTxControl not implemented")
}
func (*UnimplementedMiningServiceServer) ScheduleTxControl(MiningService_ScheduleTxControlServer) error {
	return status.Errorf(codes.Unimplemented, "method ScheduleTxControl not implemented")
}
func (*UnimplementedMiningServiceServer) CheckTxInPoolControl(MiningService_CheckTxInPoolControlServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckTxInPoolControl not implemented")
}
func (*UnimplementedMiningServiceServer) mustEmbedUnimplementedMiningServiceServer() {}

func RegisterMiningServiceServer(s *grpc.Server, srv MiningServiceServer) {
	s.RegisterService(&_MiningService_serviceDesc, srv)
}

func _MiningService_MineBlocksControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiningServiceServer).MineBlocksControl(&miningServiceMineBlocksControlServer{stream})
}

type MiningService_MineBlocksControlServer interface {
	Send(*MineBlocksControlMsg) error
	Recv() (*MineBlocksControlMsg, error)
	grpc.ServerStream
}

type miningServiceMineBlocksControlServer struct {
	grpc.ServerStream
}

func (x *miningServiceMineBlocksControlServer) Send(m *MineBlocksControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miningServiceMineBlocksControlServer) Recv() (*MineBlocksControlMsg, error) {
	m := new(MineBlocksControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MiningService_MineBlocksExceptTxControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiningServiceServer).MineBlocksExceptTxControl(&miningServiceMineBlocksExceptTxControlServer{stream})
}

type MiningService_MineBlocksExceptTxControlServer interface {
	Send(*MineBlocksExceptTxControlMsg) error
	Recv() (*MineBlocksExceptTxControlMsg, error)
	grpc.ServerStream
}

type miningServiceMineBlocksExceptTxControlServer struct {
	grpc.ServerStream
}

func (x *miningServiceMineBlocksExceptTxControlServer) Send(m *MineBlocksExceptTxControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miningServiceMineBlocksExceptTxControlServer) Recv() (*MineBlocksExceptTxControlMsg, error) {
	m := new(MineBlocksExceptTxControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MiningService_MineBlocksWithoutTxControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiningServiceServer).MineBlocksWithoutTxControl(&miningServiceMineBlocksWithoutTxControlServer{stream})
}

type MiningService_MineBlocksWithoutTxControlServer interface {
	Send(*MineBlocksWithoutTxControlMsg) error
	Recv() (*MineBlocksWithoutTxControlMsg, error)
	grpc.ServerStream
}

type miningServiceMineBlocksWithoutTxControlServer struct {
	grpc.ServerStream
}

func (x *miningServiceMineBlocksWithoutTxControlServer) Send(m *MineBlocksWithoutTxControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miningServiceMineBlocksWithoutTxControlServer) Recv() (*MineBlocksWithoutTxControlMsg, error) {
	m := new(MineBlocksWithoutTxControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MiningService_MineTdControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiningServiceServer).MineTdControl(&miningServiceMineTdControlServer{stream})
}

type MiningService_MineTdControlServer interface {
	Send(*MineTdControlMsg) error
	Recv() (*MineTdControlMsg, error)
	grpc.ServerStream
}

type miningServiceMineTdControlServer struct {
	grpc.ServerStream
}

func (x *miningServiceMineTdControlServer) Send(m *MineTdControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miningServiceMineTdControlServer) Recv() (*MineTdControlMsg, error) {
	m := new(MineTdControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MiningService_MineTxControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiningServiceServer).MineTxControl(&miningServiceMineTxControlServer{stream})
}

type MiningService_MineTxControlServer interface {
	Send(*MineTxControlMsg) error
	Recv() (*MineTxControlMsg, error)
	grpc.ServerStream
}

type miningServiceMineTxControlServer struct {
	grpc.ServerStream
}

func (x *miningServiceMineTxControlServer) Send(m *MineTxControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miningServiceMineTxControlServer) Recv() (*MineTxControlMsg, error) {
	m := new(MineTxControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MiningService_ScheduleTxControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiningServiceServer).ScheduleTxControl(&miningServiceScheduleTxControlServer{stream})
}

type MiningService_ScheduleTxControlServer interface {
	Send(*ScheduleTxControlMsg) error
	Recv() (*ScheduleTxControlMsg, error)
	grpc.ServerStream
}

type miningServiceScheduleTxControlServer struct {
	grpc.ServerStream
}

func (x *miningServiceScheduleTxControlServer) Send(m *ScheduleTxControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miningServiceScheduleTxControlServer) Recv() (*ScheduleTxControlMsg, error) {
	m := new(ScheduleTxControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MiningService_CheckTxInPoolControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiningServiceServer).CheckTxInPoolControl(&miningServiceCheckTxInPoolControlServer{stream})
}

type MiningService_CheckTxInPoolControlServer interface {
	Send(*CheckTxInPoolControlMsg) error
	Recv() (*CheckTxInPoolControlMsg, error)
	grpc.ServerStream
}

type miningServiceCheckTxInPoolControlServer struct {
	grpc.ServerStream
}

func (x *miningServiceCheckTxInPoolControlServer) Send(m *CheckTxInPoolControlMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miningServiceCheckTxInPoolControlServer) Recv() (*CheckTxInPoolControlMsg, error) {
	m := new(CheckTxInPoolControlMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MiningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "darcher.MiningService",
	HandlerType: (*MiningServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "mineBlocksControl",
			Handler:       _MiningService_MineBlocksControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "mineBlocksExceptTxControl",
			Handler:       _MiningService_MineBlocksExceptTxControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "mineBlocksWithoutTxControl",
			Handler:       _MiningService_MineBlocksWithoutTxControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "mineTdControl",
			Handler:       _MiningService_MineTdControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "mineTxControl",
			Handler:       _MiningService_MineTxControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "scheduleTxControl",
			Handler:       _MiningService_ScheduleTxControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "checkTxInPoolControl",
			Handler:       _MiningService_CheckTxInPoolControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mining_service.proto",
}
